---
interface Link {
	href: string
	text: string
	id: string
}

const links: Link[] = [
	{ href: "#presentation", text: "Presentacion", id: "presentation" },
	{ href: "#projects", text: "Proyectos", id: "projects" },
	{ href: "#technologies", text: "Tecnologias", id: "technologies" }
]
---

<nav class="flex justify-center items-center w-full h-16 fixed top-0 z-[1000] bg-background-dark dark:bg-blue-900">
  	<ul class="flex justify-center items-center gap-4">
    	{
			links.map(({href, text, id}) => (
					<li class="text-xl text-white px-2" data-id={id}>
						<a href={href}>{text}</a>
					</li>
			))
		}
  	</ul>
</nav>

<script>
	const presentation: HTMLElement | null = document.getElementById("presentation")
	const projects: HTMLElement | null = document.getElementById("projects")
	const technologies: HTMLElement | null = document.getElementById("technologies")

	const sections: HTMLElement[] = [presentation, projects, technologies].filter(
		(section): section is HTMLElement => section !== null
	)

	const observer: IntersectionObserver = new IntersectionObserver((entries) => {
  		entries.forEach((entry) => {
			const navBarLink: HTMLElement | null = document.querySelector(`[data-id="${entry.target.id}"]`)
			
			if (entry.isIntersecting) {
				navBarLink?.classList.remove("text-white")
				navBarLink?.classList.add("dark:text-blue-900", "text-black", "bg-white", "rounded-sm")
			} else {
				navBarLink?.classList.remove("dark:text-blue-900", "text-black", "bg-white", "rounded-sm")
				navBarLink?.classList.add("text-white")
			}
  		})
	},
	{
		threshold: 0.5,
		rootMargin: "0px"
	})

	sections.forEach((section) => observer.observe(section))
</script>